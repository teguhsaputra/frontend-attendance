"use client";
import { useState, useEffect } from "react";
import {
  CheckIcon,
  DoorClosedIcon,
  PlusIcon,
  PencilIcon,
  TrashIcon,
  SearchIcon,
} from "lucide-react";
import TimeDisplay from "@/components/TimeDisplay";

// Type definitions based on your API
type Department = {
  id: number;
  departement_name: string;
  max_clock_in_time: string;
  max_clock_out_time: string;
};

type Employee = {
  id: number;
  employee_id: string;
  name: string;
  address: string;
  departement_id: number;
  departement?: Department;
};

type AttendanceLog = {
  id: number;
  employee_id: number;
  clock_in: string;
  clock_out: string | null;
  status_in: string;
  status_out: string | null;
  employee?: Employee;
};

const BASE_URL = "http://127.0.0.1:8000";

export default function Home() {
  const [activeTab, setActiveTab] = useState<"absensi" | "data">("absensi");
  const [date, setDate] = useState<string>(
    new Date().toLocaleDateString("id-ID", {
      weekday: "long",
      day: "numeric",
      month: "long",
      year: "numeric",
    })
  );

  const [hasMounted, setHasMounted] = useState(false);
  useEffect(() => {
    setHasMounted(true);
  }, []);

  // Data states
  const [departments, setDepartments] = useState<Department[]>([]);
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [attendanceLogs, setAttendanceLogs] = useState<AttendanceLog[]>([]);
  const [currentEmployee, setCurrentEmployee] = useState<Employee | null>(null);
  const [lastPunch, setLastPunch] = useState<{
    in: string | null;
    out: string | null;
  }>({ in: null, out: null });

  // Form states
  const [newDepartment, setNewDepartment] = useState<Department | null>(null);
  const [newEmployee, setNewEmployee] = useState<Employee | null>(null);
  const [editingDepartment, setEditingDepartment] = useState<Department | null>(
    null
  );
  const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null);

  // Search states
  const [searchDate, setSearchDate] = useState<string>(
    new Date().toISOString().split("T")[0]
  );
  const [searchDepartment, setSearchDepartment] = useState<number>(0);
  const [searchResults, setSearchResults] = useState<AttendanceLog[]>([]);

  useEffect(() => {
    fetchDepartments();
    fetchEmployees();
    fetchAttendanceLogs();
  }, []);

  // API functions
  const fetchDepartments = async () => {
    try {
      const response = await fetch(`${BASE_URL}/api/departements`);
      const data = await response.json();
      setDepartments(data);
    } catch (error) {
      console.error("Error fetching departments:", error);
    }
  };

  const fetchEmployees = async () => {
    try {
      const response = await fetch(`${BASE_URL}/api/employees`);
      const data = await response.json();

      if (Array.isArray(data)) {
        setEmployees(data);
      } else if (Array.isArray(data.data)) {
        setEmployees(data.data);
      } else {
        console.error("Unexpected employees format:", data);
        setEmployees([]);
      }
    } catch (error) {
      console.error("Error fetching employees:", error);
      setEmployees([]);
    }
  };

  const fetchAttendanceLogs = async () => {
    try {
      const response = await fetch(`${BASE_URL}/api/attendance/logs`);
      const data = await response.json();

      if (Array.isArray(data)) {
        setAttendanceLogs(data);
      } else if (Array.isArray(data.data)) {
        setAttendanceLogs(data.data);
      } else {
        console.error("Unexpected attendance format:", data);
        setAttendanceLogs([]);
      }
    } catch (error) {
      console.error("Error fetching attendance logs:", error);
      setAttendanceLogs([]);
    }
  };

  const handleSearch = async () => {
    try {
      let url = `${BASE_URL}/api/attendance/logs?`;
      if (searchDate) url += `date=${searchDate}`;
      if (searchDepartment > 0) {
        url += `${searchDate ? "&" : ""}department_id=${searchDepartment}`;
      }

      const response = await fetch(url);
      const data = await response.json();

      if (data.success && Array.isArray(data.data)) {
        setSearchResults(data.data);
      } else {
        console.error("Unexpected search results format:", data);
        setSearchResults([]);
      }
    } catch (error) {
      console.error("Error searching attendance logs:", error);
      setSearchResults([]);
    }
  };

  const handleCheckIn = async () => {
    if (!currentEmployee) return;

    try {
      const response = await fetch(`${BASE_URL}/api/attendance/check-in`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ employee_id: currentEmployee.id }),
      });

      if (response.ok) {
        const now = new Date().toLocaleTimeString();
        setLastPunch({ ...lastPunch, in: now });
        fetchAttendanceLogs();
      }
    } catch (error) {
      console.error("Error checking in:", error);
    }
  };

  const handleCheckOut = async () => {
    if (!currentEmployee) return;

    try {
      const employeeLogs = attendanceLogs
        .filter((log) => log.employee_id === currentEmployee.id)
        .sort(
          (a, b) =>
            new Date(b.clock_in).getTime() - new Date(a.clock_in).getTime()
        );

      const latestLog = employeeLogs[0];

      if (latestLog && !latestLog.clock_out) {
        const response = await fetch(
          `${BASE_URL}/api/attendance/check-out/${latestLog.id}`,
          {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
          }
        );

        if (response.ok) {
          const now = new Date().toLocaleTimeString();
          setLastPunch({ ...lastPunch, out: now });
          fetchAttendanceLogs();
        }
      }
    } catch (error) {
      console.error("Error checking out:", error);
    }
  };

  const getLatestLog = () => {
    if (!currentEmployee) return null;
    return (
      attendanceLogs
        .filter((log) => log.employee_id === currentEmployee.id)
        .sort(
          (a, b) =>
            new Date(b.clock_in).getTime() - new Date(a.clock_in).getTime()
        )[0] || null
    );
  };

  const today = new Date();
  const isSameDay = (dateA: string, dateB: Date) => {
    const a = new Date(dateA);
    return (
      a.getFullYear() === dateB.getFullYear() &&
      a.getMonth() === dateB.getMonth() &&
      a.getDate() === dateB.getDate()
    );
  };

  const todayLog = attendanceLogs.find(
    (log) =>
      log.employee_id === currentEmployee?.id && isSameDay(log.clock_in, today)
  );

  const isCheckInDisabled = !currentEmployee || !!todayLog;

  const isCheckOutDisabled =
    !currentEmployee || !todayLog || !!todayLog.clock_out;

  // Department CRUD
  const addDepartment = async () => {
    try {
      const response = await fetch(`${BASE_URL}/api/departements`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newDepartment),
      });

      if (response.ok) {
        fetchDepartments();
        setNewDepartment(null);
      }
    } catch (error) {
      console.error("Error adding department:", error);
    }
  };

  const updateDepartment = async () => {
    if (!editingDepartment) return;
    try {
      const response = await fetch(
        `${BASE_URL}/api/departements/${editingDepartment.id}`,
        {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(editingDepartment),
        }
      );

      if (response.ok) {
        fetchDepartments();
        setEditingDepartment(null);
      }
    } catch (error) {
      console.error("Error updating department:", error);
    }
  };

  const deleteDepartment = async (id: number) => {
    try {
      const response = await fetch(`${BASE_URL}/api/departements/${id}`, {
        method: "DELETE",
      });

      if (response.ok) {
        fetchDepartments();
      }
    } catch (error) {
      console.error("Error deleting department:", error);
    }
  };

  // Employee CRUD
  const addEmployee = async () => {
    try {
      const response = await fetch(`${BASE_URL}/api/employees`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newEmployee),
      });

      if (response.ok) {
        fetchEmployees();
        setNewEmployee(null);
      }
    } catch (error) {
      console.error("Error adding employee:", error);
    }
  };

  const updateEmployee = async () => {
    if (!editingEmployee) return;
    try {
      const response = await fetch(
        `${BASE_URL}/api/employees/${editingEmployee.id}`,
        {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(editingEmployee),
        }
      );

      if (response.ok) {
        fetchEmployees();
        setEditingEmployee(null);
      }
    } catch (error) {
      console.error("Error updating employee:", error);
    }
  };

  const deleteEmployee = async (id: number) => {
    try {
      const response = await fetch(`${BASE_URL}/api/employees/${id}`, {
        method: "DELETE",
      });

      if (response.ok) {
        fetchEmployees();
      }
    } catch (error) {
      console.error("Error deleting employee:", error);
    }
  };

  // Calculate stats
  const presentToday = attendanceLogs.filter((log) => log.clock_in).length;
  const lateArrivals = attendanceLogs.filter(
    (log) => log.status_in === "Terlambat"
  ).length;
  const earlyDepartures = attendanceLogs.filter(
    (log) => log.status_out === "Pulang Cepat"
  ).length;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="max-w-6xl mx-auto px-4 py-4 flex justify-between items-center">
          <h1 className="text-2xl font-bold text-gray-800">Sistem Absensi</h1>
          <TimeDisplay />
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-6xl mx-auto px-4 py-6 grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left Column - Absen */}
        <div className="lg:col-span-2 space-y-6">
          {/* Absen Card */}
          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-semibold text-gray-800">Absen</h2>
              <div className="flex space-x-2">
                <button
                  onClick={() => setActiveTab("absensi")}
                  className={`px-4 py-2 rounded-lg ${
                    activeTab === "absensi"
                      ? "bg-blue-600 text-white"
                      : "bg-gray-100 text-gray-700"
                  }`}
                >
                  Absensi
                </button>
                <button
                  onClick={() => setActiveTab("data")}
                  className={`px-4 py-2 rounded-lg ${
                    activeTab === "data"
                      ? "bg-blue-600 text-white"
                      : "bg-gray-100 text-gray-700"
                  }`}
                >
                  Data
                </button>
              </div>
            </div>

            {activeTab === "absensi" ? (
              <div className="space-y-6">
                {/* Employee Selector */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Pilih Karyawan
                  </label>
                  <select
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    value={currentEmployee?.id || ""}
                    onChange={(e) => {
                      const selected = employees.find(
                        (emp) => emp.id === Number(e.target.value)
                      );
                      setCurrentEmployee(selected || null);
                    }}
                  >
                    <option value="">Pilih Karyawan</option>
                    {employees.map((emp) => (
                      <option key={emp.id} value={emp.id}>
                        {emp.name} ({emp.employee_id})
                      </option>
                    ))}
                  </select>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-blue-50 rounded-lg p-4 text-center">
                    <p className="text-sm text-gray-500">Jam Kerja</p>
                    <p className="text-2xl font-bold text-gray-800">
                      {currentEmployee?.departement
                        ? `${currentEmployee.departement.max_clock_in_time} - ${currentEmployee.departement.max_clock_out_time}`
                        : "08:00 - 17:00"}
                    </p>
                  </div>
                  <div className="bg-green-50 rounded-lg p-4 text-center">
                    <p className="text-sm text-gray-500">Waktu Sekarang</p>
                    <TimeDisplay />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
                    <p className="text-sm text-gray-500">Absen Masuk</p>
                    <p className="text-xl font-bold text-gray-800">
                      {lastPunch.in || "-"}
                    </p>
                  </div>
                  <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
                    <p className="text-sm text-gray-500">Absen Keluar</p>
                    <p className="text-xl font-bold text-gray-800">
                      {lastPunch.out || "-"}
                    </p>
                  </div>
                </div>

                <div className="flex space-x-4">
                  <button
                    onClick={handleCheckIn}
                    disabled={isCheckInDisabled}
                    className="flex-1 flex items-center justify-center space-x-2 bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg transition-colors disabled:opacity-50"
                  >
                    <CheckIcon className="h-5 w-5" />
                    <span>Absen Masuk</span>
                  </button>

                  <button
                    onClick={handleCheckOut}
                    disabled={isCheckOutDisabled}
                    className="flex-1 flex items-center justify-center space-x-2 bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg transition-colors disabled:opacity-50"
                  >
                    <DoorClosedIcon className="h-5 w-5" />
                    <span>Absen Keluar</span>
                  </button>
                </div>

                {/* Absen History */}
                {currentEmployee && (
                  <div className="mt-6">
                    <h3 className="font-medium text-gray-800 mb-2">
                      Riwayat Absensi
                    </h3>
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                              Tanggal
                            </th>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                              Masuk
                            </th>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                              Keluar
                            </th>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                              Status
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {attendanceLogs
                            .filter(
                              (log) => log.employee_id === currentEmployee.id
                            )
                            .map((log) => (
                              <tr key={log.id}>
                                <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                                  {new Date(log.clock_in).toLocaleDateString(
                                    "id-ID"
                                  )}
                                </td>
                                <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                                  {new Date(log.clock_in).toLocaleTimeString()}
                                </td>
                                <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                                  {log.clock_out
                                    ? new Date(
                                        log.clock_out
                                      ).toLocaleTimeString()
                                    : "-"}
                                </td>
                                <td className="px-4 py-2 whitespace-nowrap text-sm">
                                  <span
                                    className={`px-2 py-1 rounded-full text-xs ${
                                      log.status_in === "Tepat Waktu"
                                        ? "bg-green-100 text-green-800"
                                        : "bg-red-100 text-red-800"
                                    }`}
                                  >
                                    {log.status_in}
                                  </span>
                                  {log.clock_out && (
                                    <span
                                      className={`ml-2 px-2 py-1 rounded-full text-xs ${
                                        log.status_out === "Tepat Waktu"
                                          ? "bg-green-100 text-green-800"
                                          : "bg-red-100 text-red-800"
                                      }`}
                                    >
                                      {log.status_out}
                                    </span>
                                  )}
                                </td>
                              </tr>
                            ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}

                {/* Calendar Section - Only in Absensi Tab */}
                <div className="bg-white rounded-xl shadow-sm p-6">
                  <h2 className="text-xl font-semibold text-gray-800 mb-4">
                    Kalender
                  </h2>
                  <div className="grid grid-cols-7 gap-2 text-center">
                    {["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"].map(
                      (day) => (
                        <div
                          key={day}
                          className="text-sm font-medium text-gray-500 py-2"
                        >
                          {day}
                        </div>
                      )
                    )}
                    {Array.from({ length: 30 }, (_, i) => i + 1).map((day) => (
                      <div
                        key={day}
                        className={`p-2 rounded-full ${
                          day === new Date().getDate()
                            ? "bg-blue-100 text-blue-600 font-medium"
                            : "text-gray-700"
                        }`}
                      >
                        {day}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              <div className="space-y-6">
                {/* Data Management Section */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-white border border-gray-200 rounded-lg p-4">
                    <div className="flex justify-between items-center mb-2">
                      <h3 className="font-medium text-gray-800">Karyawan</h3>
                      <button
                        onClick={() => {
                          setNewEmployee({
                            id: 0,
                            employee_id: `EMP-${(employees.length + 1)
                              .toString()
                              .padStart(1, "0")}`,
                            name: "",
                            address: "",
                            departement_id: departments[0]?.id || 0,
                          });
                        }}
                        className="text-blue-600 hover:text-blue-800"
                      >
                        <PlusIcon className="h-5 w-5" />
                      </button>
                    </div>
                    <p className="text-3xl font-bold text-blue-600">
                      {employees.length}
                    </p>
                  </div>
                  <div className="bg-white border border-gray-200 rounded-lg p-4">
                    <div className="flex justify-between items-center mb-2">
                      <h3 className="font-medium text-gray-800">Departemen</h3>
                      <button
                        onClick={() =>
                          setNewDepartment({
                            id: 0,
                            departement_name: "",
                            max_clock_in_time: "08:00:00",
                            max_clock_out_time: "17:00:00",
                          })
                        }
                        className="text-blue-600 hover:text-blue-800"
                      >
                        <PlusIcon className="h-5 w-5" />
                      </button>
                    </div>
                    <p className="text-3xl font-bold text-green-600">
                      {departments.length}
                    </p>
                  </div>
                </div>

                {/* Department List */}
                <div className="bg-white border border-gray-200 rounded-lg p-4">
                  <h3 className="font-medium text-gray-800 mb-4">
                    Daftar Departemen
                  </h3>
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                            Nama Departemen
                          </th>
                          <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                            Jam Masuk
                          </th>
                          <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                            Jam Keluar
                          </th>
                          <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                            Aksi
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {departments.map((dept) => (
                          <tr key={dept.id}>
                            <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                              {dept.departement_name}
                            </td>
                            <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                              {dept.max_clock_in_time}
                            </td>
                            <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                              {dept.max_clock_out_time}
                            </td>
                            <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                              <button
                                onClick={() => setEditingDepartment(dept)}
                                className="text-blue-600 hover:text-blue-800 mr-2"
                              >
                                <PencilIcon className="h-4 w-4" />
                              </button>
                              <button
                                onClick={() => deleteDepartment(dept.id)}
                                className="text-red-600 hover:text-red-800"
                              >
                                <TrashIcon className="h-4 w-4" />
                              </button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>

                {/* Employee List */}
                <div className="bg-white border border-gray-200 rounded-lg p-4">
                  <h3 className="font-medium text-gray-800 mb-4">
                    Daftar Karyawan
                  </h3>
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                            ID Karyawan
                          </th>
                          <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                            Nama
                          </th>
                          <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                            Alamat
                          </th>
                          <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                            Departemen
                          </th>
                          <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                            Aksi
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {employees.map((emp) => (
                          <tr key={emp.id}>
                            <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                              {emp.employee_id}
                            </td>
                            <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                              {emp.name}
                            </td>
                            <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                              {emp.address}
                            </td>
                            <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                              {emp.departement?.departement_name || "-"}
                            </td>
                            <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                              <button
                                onClick={() => setEditingEmployee(emp)}
                                className="text-blue-600 hover:text-blue-800 mr-2"
                              >
                                <PencilIcon className="h-4 w-4" />
                              </button>
                              <button
                                onClick={() => deleteEmployee(emp.id)}
                                className="text-red-600 hover:text-red-800"
                              >
                                <TrashIcon className="h-4 w-4" />
                              </button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>

                {/* Search Attendance Logs */}
                <div className="bg-white border border-gray-200 rounded-lg p-4">
                  <h3 className="font-medium text-gray-800 mb-4">
                    Cari Riwayat Absensi
                  </h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Tanggal
                      </label>
                      <input
                        type="date"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        value={searchDate}
                        onChange={(e) => setSearchDate(e.target.value)}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Departemen
                      </label>
                      <select
                        className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        value={searchDepartment}
                        onChange={(e) =>
                          setSearchDepartment(Number(e.target.value))
                        }
                      >
                        <option value="0">Semua Departemen</option>
                        {departments.map((dept) => (
                          <option key={dept.id} value={dept.id}>
                            {dept.departement_name}
                          </option>
                        ))}
                      </select>
                    </div>
                    <button
                      onClick={handleSearch}
                      className="w-full flex items-center justify-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg"
                    >
                      <SearchIcon className="h-5 w-5" />
                      <span>Cari</span>
                    </button>
                  </div>
                </div>

                {/* Search Results */}
                {searchResults.length > 0 && (
                  <div className="bg-white border border-gray-200 rounded-lg p-4">
                    <h3 className="font-medium text-gray-800 mb-2">
                      Hasil Pencarian
                    </h3>
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                              Nama
                            </th>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                              Departemen
                            </th>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                              Tanggal
                            </th>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                              Masuk
                            </th>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                              Keluar
                            </th>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                              Status
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {searchResults.map((log) => (
                            <tr key={log.id}>
                              <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                                {log.employee?.name || "-"}
                              </td>
                              <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                                {log.employee?.departement?.departement_name ||
                                  "-"}
                              </td>
                              <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                                {new Date(log.clock_in).toLocaleDateString(
                                  "id-ID"
                                )}
                              </td>
                              <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                                {new Date(log.clock_in).toLocaleTimeString()}
                              </td>
                              <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                                {log.clock_out
                                  ? new Date(log.clock_out).toLocaleTimeString()
                                  : "-"}
                              </td>
                              <td className="px-4 py-2 whitespace-nowrap text-sm">
                                <span
                                  className={`px-2 py-1 rounded-full text-xs ${
                                    log.status_in === "Tepat Waktu"
                                      ? "bg-green-100 text-green-800"
                                      : "bg-red-100 text-red-800"
                                  }`}
                                >
                                  {log.status_in}
                                </span>
                                {log.clock_out && (
                                  <span
                                    className={`ml-2 px-2 py-1 rounded-full text-xs ${
                                      log.status_out === "Tepat Waktu"
                                        ? "bg-green-100 text-green-800"
                                        : "bg-red-100 text-red-800"
                                    }`}
                                  >
                                    {log.status_out}
                                  </span>
                                )}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}

                {/* Add/Edit Department Modal */}
                {(newDepartment || editingDepartment) && (
                  <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-lg p-6 w-full max-w-md">
                      <h3 className="text-lg font-medium text-gray-800 mb-4">
                        {editingDepartment ? "Edit" : "Tambah"} Departemen
                      </h3>
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Nama Departemen
                          </label>
                          <input
                            type="text"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md"
                            value={
                              editingDepartment?.departement_name ||
                              newDepartment?.departement_name ||
                              ""
                            }
                            onChange={(e) => {
                              if (editingDepartment) {
                                setEditingDepartment({
                                  ...editingDepartment,
                                  departement_name: e.target.value,
                                });
                              } else if (newDepartment) {
                                setNewDepartment({
                                  ...newDepartment,
                                  departement_name: e.target.value,
                                });
                              }
                            }}
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Batas Waktu Check-in
                          </label>
                          <input
                            type="time"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md"
                            value={
                              editingDepartment?.max_clock_in_time ||
                              newDepartment?.max_clock_in_time ||
                              "08:00:00"
                            }
                            onChange={(e) => {
                              if (editingDepartment) {
                                setEditingDepartment({
                                  ...editingDepartment,
                                  max_clock_in_time: e.target.value + ":00",
                                });
                              } else if (newDepartment) {
                                setNewDepartment({
                                  ...newDepartment,
                                  max_clock_in_time: e.target.value + ":00",
                                });
                              }
                            }}
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Batas Waktu Check-out
                          </label>
                          <input
                            type="time"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md"
                            value={
                              editingDepartment?.max_clock_out_time ||
                              newDepartment?.max_clock_out_time ||
                              "17:00:00"
                            }
                            onChange={(e) => {
                              if (editingDepartment) {
                                setEditingDepartment({
                                  ...editingDepartment,
                                  max_clock_out_time: e.target.value + ":00",
                                });
                              } else if (newDepartment) {
                                setNewDepartment({
                                  ...newDepartment,
                                  max_clock_out_time: e.target.value + ":00",
                                });
                              }
                            }}
                          />
                        </div>
                        <div className="flex justify-end space-x-3">
                          <button
                            onClick={() => {
                              setNewDepartment(null);
                              setEditingDepartment(null);
                            }}
                            className="px-4 py-2 border border-gray-300 rounded-md"
                          >
                            Batal
                          </button>
                          <button
                            onClick={
                              editingDepartment
                                ? updateDepartment
                                : addDepartment
                            }
                            className="px-4 py-2 bg-blue-600 text-white rounded-md"
                          >
                            Simpan
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Add/Edit Employee Modal */}
                {(newEmployee || editingEmployee) && (
                  <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-lg p-6 w-full max-w-md">
                      <h3 className="text-lg font-medium text-gray-800 mb-4">
                        {editingEmployee ? "Edit" : "Tambah"} Karyawan
                      </h3>
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            ID Karyawan
                          </label>
                          <input
                            type="text"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md"
                            value={
                              editingEmployee?.employee_id ||
                              newEmployee?.employee_id ||
                              ""
                            }
                            onChange={(e) => {
                              if (editingEmployee) {
                                setEditingEmployee({
                                  ...editingEmployee,
                                  employee_id: e.target.value,
                                });
                              } else if (newEmployee) {
                                setNewEmployee({
                                  ...newEmployee,
                                  employee_id: e.target.value,
                                });
                              }
                            }}
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Nama
                          </label>
                          <input
                            type="text"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md"
                            value={
                              editingEmployee?.name || newEmployee?.name || ""
                            }
                            onChange={(e) => {
                              if (editingEmployee) {
                                setEditingEmployee({
                                  ...editingEmployee,
                                  name: e.target.value,
                                });
                              } else if (newEmployee) {
                                setNewEmployee({
                                  ...newEmployee,
                                  name: e.target.value,
                                });
                              }
                            }}
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Alamat
                          </label>
                          <input
                            type="text"
                            className="w-full px-3 py-2 border border-gray-300 rounded-md"
                            value={
                              editingEmployee?.address ||
                              newEmployee?.address ||
                              ""
                            }
                            onChange={(e) => {
                              if (editingEmployee) {
                                setEditingEmployee({
                                  ...editingEmployee,
                                  address: e.target.value,
                                });
                              } else if (newEmployee) {
                                setNewEmployee({
                                  ...newEmployee,
                                  address: e.target.value,
                                });
                              }
                            }}
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Departemen
                          </label>
                          <select
                            className="w-full px-3 py-2 border border-gray-300 rounded-md"
                            value={
                              editingEmployee?.departement_id ||
                              newEmployee?.departement_id ||
                              0
                            }
                            onChange={(e) => {
                              if (editingEmployee) {
                                setEditingEmployee({
                                  ...editingEmployee,
                                  departement_id: Number(e.target.value),
                                });
                              } else if (newEmployee) {
                                setNewEmployee({
                                  ...newEmployee,
                                  departement_id: Number(e.target.value),
                                });
                              }
                            }}
                          >
                            <option value="0">Pilih Departemen</option>
                            {departments.map((dept) => (
                              <option key={dept.id} value={dept.id}>
                                {dept.departement_name}
                              </option>
                            ))}
                          </select>
                        </div>
                        <div className="flex justify-end space-x-3">
                          <button
                            onClick={() => {
                              setNewEmployee(null);
                              setEditingEmployee(null);
                            }}
                            className="px-4 py-2 border border-gray-300 rounded-md"
                          >
                            Batal
                          </button>
                          <button
                            onClick={
                              editingEmployee ? updateEmployee : addEmployee
                            }
                            className="px-4 py-2 bg-blue-600 text-white rounded-md"
                          >
                            Simpan
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Right Column - Profile */}
        <div className="space-y-6">
          {/* Profile Card */}
          <div className="bg-white rounded-xl shadow-sm p-6 text-center">
            <div className="w-20 h-20 mx-auto rounded-full bg-gray-200 mb-4 flex items-center justify-center">
              <span className="text-2xl font-semibold text-gray-600">
                {currentEmployee?.name.charAt(0) || "U"}
              </span>
            </div>
            <h2 className="text-xl font-semibold text-gray-800">
              {currentEmployee
                ? `Hai, ${currentEmployee.name.split(" ")[0]}`
                : "Hai, Pengguna"}
            </h2>
            <p className="text-gray-500">Selamat Pagi</p>
            <p className="text-gray-500 mb-4">Semoga hari Anda menyenangkan</p>
            <button className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors">
              Lihat Profil
            </button>
          </div>
        </div>
      </main>
    </div>
  );
}
